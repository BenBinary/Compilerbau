/*

	### GENERIC ###

	Vollständige Beschreibung einer Grammatik
	Dient als Grundlage für einen Parser oder einen Lexer

*/


/*

	### AST-Erzeugung mithilfe von JJ-Tree ###
	
	Default bei JJ-Tree
	Ohne Einschränkung würde für jedes NT ein Knoten erzeugt werden - mit den entsprechenden Kindern

	Mit NODE_DEFAULT_VOID = true; werden zunächst keinen Knoten erzeugt, man muss explizit angeben welche Knoten erzeugt werden sollen
	 - Mit #KNOTEN gibt man entsprechende Knoten an
	 - Mit multi werden verschiedene Klassen erzeugt

	 Codeerzeugung
	 - jjtree <Dateiname>.jjt
	 - javacc <Dateiname>.jj
	 Für jede angegebene Knotenklasse wird eine extra Klasse (siehe Klassenstruktur) angelegt


		
		
	 Ändern mit Präfix mit NODE_PREFIX

	 TRACK_TOKENS = true;
	 Bestimmmen wo ein  Fehler beginnt und wieder endet.
	 
*/

options {

	STATIC = false;
	DEBUG_PARSER = true;
	NODE_DEFAULT_VOID = true;
	MULTI = true;
	TRACK_TOKENS = true;
	

}


// Parser
PARSER_BEGIN(RegAusdruck)

package aufgabe_2

public class RegAusdruck {

}

PARSER_END(RegAusdruck)

// Lexer
TOKEN : {

	<Char : ["a"-"z", "A"-"Z", "0"-"9"]>
	| <Empty : "\"\"" > | <EmptySet : "{}">
	| "(" | ")" | "*" | "|"

}

// Parserregeln / Grammatik
// Compilation Unit
// CU -- > 
void cu() : {}{

  // Für AST gibt man hierdrin eine Knotenklasse zurück
   or() <EOF>

}



// OR --> Concat ("|" Concat ) *
Node or() #Or : {} {
  
	concat() ("|" concat())*

}


// Concat --> Star (Star)*
void concat() #Concat : {} {

	star() (star())*
	 
}

// Star --> Atom ("*")*		Bspl. a**
void star() #Star : {} {
	atom() ("*")*

}

// Atom --> <Char> | <Empty> | <EmptySet> | "(" Or ")"
void atom() #Atom : {}{
	<Char >
	| <Empty>
	| <EmptySet>
	|  "(" or() ")"
}