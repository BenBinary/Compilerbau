/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RegAusdruck.jj */
/*@egen*//*

	### GENERIC ###

	Vollst\u00e4ndige Beschreibung einer Grammatik
	Dient als Grundlage f\u00fcr einen Parser oder einen Lexer

*/


/*

	### AST-Erzeugung mithilfe von JJ-Tree ###
	
	Default bei JJ-Tree
	Ohne Einschr\u00e4nkung w\u00fcrde f\u00fcr jedes NT ein Knoten erzeugt werden - mit den entsprechenden Kindern

	Mit NODE_DEFAULT_VOID = true; werden zun\u00e4chst keinen Knoten erzeugt, man muss explizit angeben welche Knoten erzeugt werden sollen
	 - Mit #KNOTEN gibt man entsprechende Knoten an
	 - Mit multi werden verschiedene Klassen erzeugt

	 Codeerzeugung
	 - jjtree <Dateiname>.jjt
	 - javacc <Dateiname>.jj
	 F\u00fcr jede angegebene Knotenklasse wird eine extra Klasse (siehe Klassenstruktur) angelegt


		
		
	 \u00c4ndern mit Pr\u00e4fix mit NODE_PREFIX

	 TRACK_TOKENS = true;
	 Bestimmmen wo ein  Fehler beginnt und wieder endet.

	 In SimpleNode gibt es dann hierf\u00fcr
	   	protected Token firstToken;
  		protected Token lastToken;
	 
*/

options {

	STATIC = false;
	DEBUG_PARSER = true;
	                         
	             
	                    
	               
	

}


// Parser
PARSER_BEGIN(RegAusdruck)

package aufgabe_2;

public class RegAusdruck/*@bgen(jjtree)*/implements RegAusdruckTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRegAusdruckState jjtree = new JJTRegAusdruckState();

/*@egen*/

}

PARSER_END(RegAusdruck)

// Lexer
TOKEN : {

	<Char : ["a"-"z", "A"-"Z", "0"-"9"]>
	| <Empty : "\"\"" > | <EmptySet : "{}">
	| "(" | ")" | "*" | "|"

}

// Ignorieren von Leerzeichen und Tab-Stopps
SKIP : {

	" " | "\t"

}

// Parserregeln / Grammatik
// Compilation Unit
// CU -- > 
void cu() : {}{

  // F\u00fcr AST gibt man hierdrin eine Knotenklasse zur\u00fcck
   or() <EOF>

}

  

// OR --> Concat ("|" Concat ) *
void or()         : {/*@bgen(jjtree) #Or(> 1) */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) #Or(> 1) */
        try {
/*@egen*/

  	// TODO: Nehmen des obersten Element vom Stack
	
	// In #Or() kann es eine Bedingung geben, sobald ein Knoten angelegt wird
	// Bei #Or(> 1) wird dieser nur erzeugt, sobald ein Kindknoten vorhanden ist

  	try {

		concat()
		 
	} catch(ParseError pe) {

	}
	
	("|" concat())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

	//  { jjtThis.firstConcat  }

}


// Concat --> Star (Star)*
void concat()             : {/*@bgen(jjtree) #Concat(> 1) */
  ASTConcat jjtn000 = new ASTConcat(JJTCONCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) #Concat(> 1) */
        try {
/*@egen*/

	star() | (star())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	 
}

// Star --> Atom ("*")*		Bspl. a**
// Welche Regel wird hier abh\u00e4ngig vom Lookahead ausgef\u00fchrt?

// Syntaktischer Lookeahed: 	LOOKAHEAD(("a")*("*")) atom()("*")*
// Semantischer Lookeahed:		LOOKAHEAD( { getToken(15).kind==char }) atom()("*")*

// 

void star()       : {/*@bgen(jjtree) Star */
  ASTStar jjtn000 = new ASTStar(JJTSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Star */
        try {
/*@egen*/

	
	atom()("*")*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	

}

// Atom --> <Char> | <Empty> | <EmptySet> | "(" Or ")"
// Es kann schnell gehen, dass die Regeln nicht mehr eindeutig sind
// Die zweite Regel wird nicht ausgef\u00fchrt
// Mit dem Lookahead 2 kann man die n\u00e4chsten beiden Tokens einlesen

/*
		Warning: Choice conflict involving two expansions at
         line 117, column 9 and line 118, column 11 respectively.
         A common prefix is: <Char>

*/
void atom()       : {/*@bgen(jjtree) Atom */
  ASTAtom jjtn000 = new ASTAtom(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Atom */
        try {
/*@egen*/
	//LOOKAHED(2) <Char>
	<Char> // "!"
	| <Empty>
	| <EmptySet>
	|  "(" or() ")"
	|/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/ { skipTo(); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


// normaler Java-Code
JAVACODE 
void skiptTo() {
	
}