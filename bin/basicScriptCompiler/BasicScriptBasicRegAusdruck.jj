options {

	STATIC = false;
	DEBUG_PARSER = true;

}

PARSER_BEGIN(BasicScript)

package basicScriptCompiler;

public class BasicScript {


}


PARSER_END(BasicScript)

// Lexer
TOKEN : {

	<Char: ["a"-"z", "A"-"Z", "0"-"9"] >
	| <Emtpy : "\"\"" >
	| <EmptySet : "{}" >
	|  "(" | ")" | "=" | "*" | ";" | "<"
	| "int" | "double" | "print" | "if" | "else"
	|  "{" | "}"
	
}

// Chars to ignore
SKIP : {
  
	" " | "\t"
	
}

// 1. cu
void cu() : {} {

  decl() <EOF>

}

// declaration
// checks if its int or double
void decl() : {} {

  ("int" | "double") type()

}

// type
void type() : {} {

  <Char> ";"

}

// statement
void stmnt() : {} {

	<Char >
  
} 

// print Statement

void printStmnt(): {} {

  "print" atom()

}

// if Statement
void if() : {} {

	<IDENTIFIER>
  //"*" atom()

}

// while Statement
void while() : {} {

  "while" atom()

}

// expression Statement like ";" 

// block
void block() {} {

  atom() ";"

  

}

// expression

// compare

// sum

// prod


// atom
void atom() : {} {

	<Char >
	// | <Empty>
	| <EmptySet>
	  

  
  }