/**

Fragenkatalog

 - Wie deklariert man richtig?
 - Wie kann ich einen Block und die entsprechenden Elemente darin bestm√∂glich schreiben
 - Wie kann ich einen Block komplett lesen?
 
*/

options {

	STATIC = false;
	DEBUG_PARSER = true;

}

PARSER_BEGIN(BasicScript)

package basicScriptCompiler;

public class BasicScript {


}


PARSER_END(BasicScript)

// Lexer
TOKEN : {

	<Char: ["a"-"z", "A"-"Z", "0"-"9"] >
	| <Empty : "\"\"" >
	| <EmptySet : "{}" >
	|  "(" | ")" | "=" | "*" | ";" | "<"
	| "int" | "double" | "print" | "if" | "else"
	|  "{" | "}"
	
}

// Chars to ignore
SKIP : {
  
	" " | "\t" | "\n"
	
}

// 1. cu
void cu() : {} {

	(decl() | stmnt())* <EOF>
 	// (decl() | stmnt())*  <EOF>

}

// declaration
// checks if its int or double
// dynamic typisation is possible
void decl() : {} {

	("int" | "double" | <Empty >) <Char > ( ";" | <Empty> | <EmptySet> )

}

// type
void type() : {} {

  atom() ( ";" | <Empty> | <EmptySet> )

}

// statement
void stmnt() : {} {

  LOOKAHEAD(2)
  atom() sumStmnt()
| atom() prodStmnt()
| whileStmnt()
| printStmnt()
| ifStmnt()



  
} 

// print Statement

void printStmnt(): {} {

  "print" atom() ";"

}

// if Statement

void ifStmnt() : {} {
	
  "if" compareStmnt() block() "else" block()

}

// while Statement
void whileStmnt() : {} {

  "while" compareStmnt() block()

}

// expression Statement like ";" 

// block
void block(): {} {

  "{" (decl() | stmnt())*  "}"

}

// expression
void expr(): {} {

	<Char >	 ";"

}

// compare
void compareStmnt() : {} {

  "(" atom() "<" atom() ")"


}

// sum
void sumStmnt() : {} {

  ("=" atom())* ";" 

}

// prod
void prodStmnt() : {} {

	"*" atom() ";"

}



// atom
void atom() : {} {

	<Char >
	// | <Empty>
	| <EmptySet>
	  

  
  }